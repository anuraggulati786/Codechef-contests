There's a zebra crossing appearing in the middle of nowhere with N blocks in it. The colors of the zebra crossing is represented by a binary string S, where Si is 1 if the i-th block from the left is white, and 0 if the block is black.

Chef really wants to play with the zebra crossing. Although the given zebra crossing might not have alternate black and white blocks, Chef wants to follow the alternating white-black color pattern while crossing it.

Initially, Chef stands at block 1. Chef has to jump exactly K times, and in each jump he has to move forward and jump to a different color than that previously occupied by Chef. More formally, suppose that Chef is currently at block i and wants to jump to block j then following conditions should hold:

i<j
Si≠Sj
Output the farthest block Chef can reach with exactly K jumps. If Chef cannot jump exactly K times, output -1.

Input Format
The first line contains an integer T denoting the number of test cases. The T test cases then follow.
The first line of each test case contains two integers N and K.
The second line of each test case consists of a binary string of length N denoting the color of blocks of the zebra crossing.
Output Format
For each test case, output the farthest block Chef can reach with exactly K jumps, or -1 in case Chef cannot jump exactly K times.

Constraints
1≤T≤105
2≤N≤103
1≤K≤N
Sum of N over all test cases does not exceed 5⋅105
Sample Input 1 
3
6 2
100101
5 1
10111
6 1
000000
Sample Output 1 
6
2
-1
Explanation
For the first test case, Chef can jump in the following order: 1→5→6.

For the second test case, Chef can jump in the following order: 1→2.

For the third test case, Chef cannot make any jumps.














#########************C++ SOLUTION **********##################

#include<bits/stdc++.h>
using namespace std;
#define ll long long int

void solve()
{
    ll n,k;
    cin>>n>>k;
    string s;
    cin>>s;

    char res = s[0];
    int cnt =0;
    for(int i=1;i<n;i++) {
        if(res != s[i]) {
            cnt++;
            res = s[i];
        }
    }

    if(cnt<k) {
        cout<<-1<<"\n";
        return;
    }
    if(s[0]=='0') {
        if(k%2) {
            for(int i=s.size()-1; i>=0; i--) {
                if(s[i] == '1') {
                    cout<<i+1<<"\n";
                    return;
                }
            }
        }
        else {
            for(int i=s.size()-1; i>=0; i--) {
                if(s[i] == '0') {
                    cout<<i+1<<"\n";
                    return;
                }
            }
        }
    }
    else {
        if(k%2) {
            for(int i=s.size()-1; i>=0; i--) {
                if(s[i] == '0') {
                    cout<<i+1<<"\n";
                    return;
                }
            }
        }
        else {
            for(int i=s.size()-1; i>=0; i--) {
                if(s[i] == '1') {
                    cout<<i+1<<"\n";
                    return;
                }
            }
        }
    }

}
int main()
{
    //fast input and output
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
 
    long int T;
    cin>>T;
    while(T--) {
        solve();
    }
    return 0;
}

